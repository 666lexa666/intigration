import fetch from "node-fetch";

const MERCHANT_ORDER_ID = "game-refill-pro"; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id –¥–ª—è —Ç–µ—Å—Ç–∞
const MERCHANT_TSP_ID = 1408;
const MERCHANT_CALLBACK = "https://webhook-ooo.vercel.app/api/webhook";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const { fullName, phone, telegram, platform, steamId, pubgUid, amount } = req.body;

    const commission = platform === "steam" ? 0.10 : 0.08;
    const total = Math.ceil(amount * (1 + commission));
    const totalInCents = total * 100; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    const message = `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
üë§ –§–ò–û: ${fullName}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìû Telegram: @${telegram}
üéÆ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform === "steam" ? "Steam" : "PUBG Mobile"}
${platform === "steam" ? `üÜî Steam ID: ${steamId}` : `üÜî PUBG UID: ${pubgUid}`}
üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${amount} —Ä—É–±.
üí≥ –ö –æ–ø–ª–∞—Ç–µ: ${total} —Ä—É–±.
    `;
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text: message }),
    });

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Pay2Day
    const authRes = await fetch("https://identity.authpoint.pro/api/v1/public/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ login: "khrulenko.y@gmail.com", password: "8Pb4JqFq" }),
    });
    const authData = await authRes.json();
    if (!authData.accessToken) throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ paymentAmount –¥–ª—è RUB!)
    const orderRes = await fetch("https://pay.kanyon.pro/api/v1/order", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${authData.accessToken}`,
      },
      body: JSON.stringify({
        merchantOrderId: MERCHANT_ORDER_ID,
        paymentAmount: totalInCents,
        orderCurrency: "RUB",
        tspId: MERCHANT_TSP_ID,
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${platform}`,
        callbackUrl: MERCHANT_CALLBACK,
      }),
    });
    const orderData = await orderRes.json();
    if (!orderData.order || !orderData.order.id) {
      throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: " + JSON.stringify(orderData));
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è QR
    const qrRes = await fetch(`https://pay.kanyon.pro/api/v1/order/qrcData/${orderData.order.id}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${authData.accessToken}`,
      },
    });
    const qrData = await qrRes.json();
    if (!qrData.order || !qrData.order.payload) {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR: " + JSON.stringify(qrData));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –Ω–∞ —Ñ—Ä–æ–Ω—Ç
    return res.status(200).json({ qrPayload: qrData.order.payload });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    return res.status(500).json({ error: error.message });
  }
}


{/* Payment Modal */}
{showPaymentModal && (
  <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
    <div className="bg-gray-800 rounded-2xl max-w-md w-full">
      <div className="p-6 text-center">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-2xl font-bold">–û–ø–ª–∞—Ç–∞</h3>
          <button onClick={() => setShowPaymentModal(false)} className="text-gray-400 hover:text-white">
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º QR –∏ –∑–∞–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
        <div className="flex justify-center bg-white p-4 rounded-lg mb-4 w-max mx-auto">
          {qrPayload ? (
            <QRCode value={qrPayload || ""} size={192} />
          ) : (
            <p className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ QR...</p>
          )}
        </div>

        <p className="text-gray-300 mb-4">–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã</p>
        <p className="text-sm text-gray-400">–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.</p>
      </div>
    </div>
  </div>
)}